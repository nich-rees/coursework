#lang plai
(print-only-errors #t)
(define (... . args) (cons '... args)) ;; enables us to use ... in templates

(require "tomax.rkt")


;; Assignment 5: match dot pl: Spark a Meaningful Connection Between Languages

;; Data must be interpreted

;; Tomax and Xamot are twin languages that together provide a flexible means
;; of matching strings according to patterns, and generating new strings
;; in terms of those patterns (named in honour of
;; https://en.wikipedia.org/wiki/Tomax_and_Xamot).  The Xamot evaluator accepts
;; a Xamot program, which describes a string, and a list of "overrides" which
;; lets you customize the string generated by the program.
;; The Tomax evaluator accepts a Tomax program, which describes a string
;; *pattern*, and a string, and produces a list of Xamot programs that
;; correspond to pattern matches.  So you can think of a Xamot program as a
;; pattern match result (like that returned from a regular expression engine)
;; and the Xamot interpreter as a means to query and transform match results.


;; Both languages make use of "effects" during interpretation:
;; 1) Tomax uses a threaded accumulator to track of how much of the input string
;;    has been matched so far, and also uses backtracking to generate all
;;    possible matches. It also uses an environment accumulator, but we will
;;    disregard that.
;; 2) Xamot uses accumulators to describe "dynamic reference contexts", which
;;    determine which reference expressions can be overridden, an environment,
;;    which we also treat as an accumulator, and an initial set of
;;    overrides, which is technically a parameter but we can also treat it as a
;;    degenerate accumulator that never needs updating.

;; Your mission is to use effect abstractions to:
;; 1) re-structure the implementation of Xamot (see xamot.rkt);
;; 2) complete the implementation of Tomax (see tomax.rkt); 

;; See the files above for explanations of the languages and examples.


         
