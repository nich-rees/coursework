#lang plai


;; Example 1: Call-by-value
'{with {x {+ 5 7}}
       {- x x}}

;; evaluate the bound expression...
'{with {x 12}
       {- x x}}

;;.. then perform substitution
'{- 12 12}

0


;; Example 2: Call-by-name evaluation (substitute the entire named expression!)

'{with {x {+ 5 7}}
       {- x x}}


;; Example 3: substitution blows away the bound expression without ever
;; evaluating it
'{with {x {+ 5 7}}
       {- 9 2}}


;; Example 4: Wait a minute, that means...
'{with {room-warmer {fix f f}}
       {- 9 2}}


;; Call-by-name generalizes to *non-strict* evaluation semantics,
;; wherein in addition to binding expressions to identifiers,
;; constructor expressions do not evaluate their arguments: they are values!

'{pair {fix f f} {fix f f}}  ;; <-- this is a value (a pair of expressions)


;;
;; Let's talk about our good friends fix and pairs and see how
;; call-by-name  (i.e. non-strict evaluation) treats them
;;

;; Here's call-by-value (aka strict aka eager) evaluation
'{fix f {pair 1 f}}


;;...  and it keeps going.  This represents an *infinite list* of 1's!
;; Sometimes these infinite lists are called *streams*

;; Under call-by-name (non-strict) evaluation pairs do not evaluate their
;; arguments until needed
'{fix f {pair 1 f}}


;; here's where it gets interesting
;; the following would diverge in call-by-value, but in call-by-name it
;; produces a value!
'{with {inf {fix f {pair 1 f}}}
       {left inf}}


;; let's look at with again
'{with {x {+ 5 7}}
       {- x x}}

;; The above with expression is equivalent to the following!
'{{fun {x} {- x x}} {+ 5 7}} 


;; Two nested withs:
'{with {y {- 10 55}}
       {with {x y}
             x}}








