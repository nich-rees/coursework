#lang plai
(print-only-errors)
(define ... (λ args (cons '... args))) ;; enables us to use ... in templates

(require "datatype-311.rkt") ; define-type with #:when checks for side conditions

;; t9-starter - tutorial on well-typing


;; Tiny mostly useless language (TMU), but typed!

(define-type Type
  [numType]
  [funType (domain Type?) (range Type?)])
;; <Type> ::= number | <Type> -> <Type>


(define-type TMU
  [num (n number?)]
  [add (lhs TMU?) (rhs TMU?)]
  [id (x symbol?)]
  [fixFun (f symbol?) (f-type Type?) (x symbol?) (body TMU?)]
  [app (rator TMU?) (rand TMU?)])

;; * Note: the type annotation in fixFun (called f-type in the datatype) refers
;;   to the type of the function *not* the type of the parameter x.

;; <TMU> ::= <number>
;;         | {+ <TMU> <TMU>}
;;         | <id>
;;         | {fixFun {<id> : <Type>} {<id>} <TMU>}
;;         | {<TMU> <TMU>}

;; TODO: Add interp.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Environments

;; (envof X) is (listof (list symbol X))

;; any -> boolean
;; produce true if the given object is an (envof X)
(define ((envof? X?) x)
  (match x
    [(list `(,x ,v) ...) #:when (and (andmap symbol? x)
                                     (andmap X? v)) #t]
    [else #f]))

;; (listof symbol) -> boolean
;; produce true if each symbol in x* appears only once
(define (unique? lox)
  (cond
    [(empty? lox) #t]
    [else ;; (cons? lox)
     (and (not (member (first lox) (rest lox)))
          (unique? (rest lox)))]))

(test (unique? '()) #t)
(test (unique? '(a)) #t)
(test (unique? '(a b c d)) #t)
(test (unique? '(a b c b)) #f)
(test (unique? '(a a c d)) #f)

;; empty-env : Env
(define empty-env '())

;; extend-env : (envof X) (listof symbol) (listof X) -> (envof X)
;; Produce an environment that binds distinct symbols in x* to values in v*.
;; ASSUME: (= (length x*) (length v*))
;; ASSUME: (unique? x*) 

(define (extend-env env x* v*)
  (append (map list x* v*) env))

(test (extend-env empty-env '(x y z) '(5 6 7)) '((x 5)
                                                 (y 6)
                                                 (z 7)))
(test (extend-env
       (extend-env empty-env '(x y z) '(5 6 7))
       '(a x c) '(5 6 7))
      '((a 5)
        (x 6)
        (c 7)
        (x 5)
        (y 6)
        (z 7)))

;; lookup-env : (envof X) symbol -> X
;; Produce the binding for the given symbol.
;; Effect: Signals an error if no binding is found.
(define (lookup-env env x)
  (cond [(empty? env) (error 'lookup-env "unbound identifier: ~a" x)]
        [else (if (symbol=? x (car (first env)))
                  (cadr (first env))
                  (lookup-env (rest env) x))]))

(test (lookup-env (extend-env
                   (extend-env empty-env '(x y z) '(5 6 7))
                   '(a x c) '(5 6 7))
                  'z)
      7)

;; (envof X) Symbol -> Boolean
;; produce true if the environment binds x, otherwise false
(define (in-env? env x)
  (cond [(assoc x env) #t]
        [else #f]))

(test (in-env? (extend-env
                (extend-env empty-env '(x y z) '(5 6 7))
                '(a x c) '(5 6 7))
               'z)
      #t)

(test (in-env? (extend-env
                (extend-env empty-env '(x y z) '(5 6 7))
                '(a x c) '(5 6 7))
               'q)
      #f)

;; (envof X) (listof identifier) -> (envof X)
;; remove the initial bindings of env indicated by loid
(define (shrink-env env loid)
  (cond
    [(empty? loid) env]
    [else ; (cons? loid)
     (if (symbol=? (caar env) (first loid))
         (shrink-env (rest env) (rest loid))
         (error 'shrink-env "Binding mismatch: ~a ∈ ~a"  (first loid) env))]))


(test (shrink-env empty-env empty) empty-env)

(test (shrink-env (extend-env empty-env (list 'x 'y) (list 7 8))
                  (list 'x))
      (extend-env empty-env (list 'y) (list 8)))

(test (shrink-env (extend-env empty-env (list 'x 'y) (list 7 8))
                  (list 'x 'y)) empty-env)

(test/exn (shrink-env (extend-env empty-env (list 'x 'y) (list 7 8))
                      (list 'y)) "mismatch")

;; (envof X) (listof symbol) (listof X) -> boolean
;; Produce true if environment env0 begins with mapping of identifers
;; in x* to values in v*.
;; ASSUME: (= (length x*) (length v*))
;; ASSUME: (unique? x*)
(define (extends-env? env0 x*0 v*0)
  (let loop ([x* x*0] [v* v*0] [env env0])
    (cond [(empty? x*) #t]
          [else (match env0
                  [(cons (list x^ v^)  env^)                    
                   (and (equal? (first x*) x^)
                        (equal? (first v*) v^)
                        (loop (rest x*) (rest v*) (rest env)))]
                  [else #f])])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Type Checking

;; Tenv is (envof Type)
;; interp. The type associated to each identifier in the surrounding context
(define Tenv? (envof? Type?))

(define (identifier? x)
  (local [(define RESERVED '(number + fixFun :))]
    (and (symbol? x)
         (not (memq x RESERVED)))))



;; PROBLEM 1: Define a well-typing datatype for the
;; tenv ⊢ tmu : type judgment.  Call it TMU/wt.


;; Option 1: TMU/wt definition that omits side conditions
;; (requires call to side-condition checker check-tmu/wt
;; for given derivation to be well-formed)
#;(define-type TMU/wt
  [num/wt (tenv Tenv?) (n number?)]
  [add/wt (tmu/wt1 TMU/wt?) (tmu/wt2 TMU/wt?)]
  [id/wt (tenv Tenv?) (x identifier?)]
  [fixFun/wt (f identifier?) (f-type Type?) (x identifier?) (tmu/wt TMU/wt?)]
  [app/wt (tmu/wt1 TMU/wt?) (tmu/wt2 TMU/wt?)])

;; Option 2: TMU/wt definition that integrates side
;; conditions through #:when checks (requires datatype-311.rkt)
(define-type TMU/wt
  [num/wt (tenv Tenv?) (n number?)]
  [add/wt (tmu/wt1 TMU/wt?) (tmu/wt2 TMU/wt?)
          #:when (equal? (tmu/wt-tenv tmu/wt1)
                         (tmu/wt-tenv tmu/wt2))]
  [id/wt (tenv Tenv?) (x identifier?)
         #:when (assoc x tenv)]
  [fixFun/wt (f identifier?) (f-type Type?) (x identifier?) (tmu/wt TMU/wt?)
             #:when (and (funType? f-type)
                         (match-let ([(funType param-type result-type) f-type]
                                     [tenv2 (tmu/wt-tenv tmu/wt)])
                           (extends-env? tenv2
                                         (list f x)
                                         (list f-type param-type))
                           (equal? (tmu/wt-type tmu/wt) result-type)))]  
  [app/wt (tmu/wt1 TMU/wt?) (tmu/wt2 TMU/wt?)
          #:when (and (funType? (tmu/wt-type tmu/wt1))
                      (match-let ([(funType param-type result-type) (tmu/wt-type tmu/wt1)])
                        (and (equal? (tmu/wt-tenv tmu/wt1) (tmu/wt-tenv tmu/wt2))
                             (equal? (tmu/wt-type tmu/wt2) param-type))))])

; template
(define (fn-for-TMU/wt tmu/wt)
  (type-case TMU/wt tmu/wt
    [num/wt (tenv n) (... tenv n)]
    [add/wt (tmu/wt1 tmu/wt2)
            (... (fn-for-TMU/wt tmu/wt1)
                 (fn-for-TMU/wt tmu/wt2))]
    [id/wt (tenv x) (... tenv x)]
    [fixFun/wt (f type x tmu/wt)
               (... f type x (fn-for-TMU/wt tmu/wt))]
    [app/wt (tmu/wt1 tmu/wt2)
            (... (fn-for-TMU/wt tmu/wt1)
                 (fn-for-TMU/wt tmu/wt2))]))

;; [num/wt]
;; ----------------------
;;    tenv ⊢ n : number


;; [add/wt]  tenv1 ⊢ tmu1 : number   tenv2 ⊢ tmu2 : number
;; ------------------------------------------------------------
;;            tenv1 ⊢ {+ tmu1 tmu2} : number
;; CHECK: tenv1 = tenv2
  

;; [id/wt]
;; ------------------------
;;     tenv ⊢ x : type 
;; CHECK: (lookup-env tenv x) = type


;; [fixFun/wt]  tenv2 ⊢ tmu : type1  
;; ------------------------------------------------------------
;;            tenv1 ⊢ {fixFun {f : type3} {x} tmu} : type3
;; CHECK: tenv2 = (extend-env tenv1
;;                            (list f x)
;;                            (list type3 type0))
;; CHECK: type3 = type0 -> type1

;; * Notice that x has type type0 in the above rule, which matches the domain
;;   type of the function (type3).
;; * The type annotation for f, i.e. type3, matches the type of the overall
;;   term.
  

;; [app/wt]  tenv1 ⊢ tmu1 : type1   tenv2 ⊢ tmu2 : type2
;; ------------------------------------------------------------
;;            tenv1 ⊢ {tmu1 tmu2} : type3
;; CHECK: tenv1 = tenv2
;; CHECK: type1 = type2 -> type3


;; PROBLEM 2: Define selector functions for the TMU/wt datatype.

;; Selector functions:
;; * Produce the type environment in which the well-typing datatype holds
;; * Produce the TMU expression that the well-typing datatype is about
;; * Produce the type of the above expression


;; TMU/wt -> Tenv
;; produce the type environment associated with the given derivation
(define (tmu/wt-tenv tmu/wt)
  (type-case TMU/wt tmu/wt
    [num/wt (tenv n) tenv]
    [add/wt (tmu/wt1 tmu/wt2)
            (tmu/wt-tenv tmu/wt1)] ; arbitrarily choose left since they're equal
    [id/wt (tenv x) tenv]
    [fixFun/wt (f type x tmu/wt^)
               (let ([tenv (tmu/wt-tenv tmu/wt^)])
                 (shrink-env tenv (list f x)))]
    [app/wt (tmu/wt1 tmu/wt2)
            (tmu/wt-tenv tmu/wt1)]))


;; TMU/wt -> TMU
;; produce the tmu expression associated with the given derivation
(define (tmu/wt-tmu tmu/wt)
  (type-case TMU/wt tmu/wt
    [num/wt (tenv n) (num n)]
    [add/wt (tmu/wt1 tmu/wt2)
            (add (tmu/wt-tmu tmu/wt1)
                 (tmu/wt-tmu tmu/wt2))]
    [id/wt (tenv x) (id x)]
    [fixFun/wt (f f-type x tmu/wt)
               (fixFun f f-type x (tmu/wt-tmu tmu/wt))]
    [app/wt (tmu/wt1 tmu/wt2)
            (app (tmu/wt-tmu tmu/wt1)
                 (tmu/wt-tmu tmu/wt2))]))


;; TMU/wt -> Type
;; produce the type associated with the given derivation
(define (tmu/wt-type tmu/wt)
  (type-case TMU/wt tmu/wt
    [num/wt (tenv n) (numType)]
    [add/wt (tmu/wt1 tmu/wt2)
            (numType)]
    [id/wt (tenv x) (lookup-env tenv x)]
    [fixFun/wt (f f-type x tmu/wt)
               f-type] ; return self-reference's type
    [app/wt (tmu/wt1 tmu/wt2)
            (funType-range (tmu/wt-type tmu/wt1))]))


;; PROBLEM 3: Define a side-condition check function for the datatype.
;; Call it check-TMU/wt. NOTE: we use the term "ill-formed" to refer to a
;; TMU/wt that does not satisfy some side conditions.

;; Type -> string
;; produce a string corresponding to a given type
(define (type-string type)
  (type-case Type type
    [numType () "(number)"]
    [funType (dom rng) (string-append "("
                                      (type-string dom)
                                      " -> "
                                      (type-string rng)
                                      ")")]))

;; TMU/wt -> void
;; given a well-formed TMU/wt, produce void
;; Effect: signal an error if the given TMU/wt derivation is ill-formed.
(define (check-tmu/wt tmu/wt)
  (local [;; Tenv Tenv -> void
          (define (check-tmu/wt-tenvs tmu/wt1 tmu/wt2)
            (unless (equal? (tmu/wt-tenv tmu/wt1)
                            (tmu/wt-tenv tmu/wt2))
              (error 'check "mismatched envs, ~a ≠ ~a"
                     (tmu/wt-tenv tmu/wt1)
                     (tmu/wt-tenv tmu/wt2))))

          ;; TMU/wt Type -> void
          (define (check-tmu/wt-type tmu/wt type)
            (begin
              (check-tmu/wt tmu/wt)
              (unless (equal? (tmu/wt-type tmu/wt) type)
                (error 'check "~a has type ~a: expected ~a"
                       (tmu/wt-tmu tmu/wt)
                       (type-string (tmu/wt-type tmu/wt))
                       (type-string type)))))

          ;; Type -> funType
          (define (to-funType type)
            (match type
              [(funType param-type result-type) type]
              [else (error 'check-tmu/wt "Unexpected non-function type ~a"
                           (type-string type))]))

          ;; Tenv identifier Type -> void
          (define (check-env-binding tenv x expected-type)
            (let ([env-type (lookup-env tenv x)])
                 (unless (equal? env-type expected-type)
                   (error 'check-tmu/wt
                          "unexpected type binding for ~a:\nexpected ~a\ngot ~a"
                          env-type
                          expected-type))))
          ]
    (type-case TMU/wt tmu/wt
      [num/wt (tenv n) (void)]
      [add/wt (tmu/wt1 tmu/wt2)
              (begin
                (check-tmu/wt-type tmu/wt1 (numType))
                (check-tmu/wt-type tmu/wt2 (numType))
                (check-tmu/wt-tenvs tmu/wt1 tmu/wt2))]
      [id/wt (tenv x)
             (cond
               [(assoc x tenv) (void)]
               [else
                (error 'check-tmu/wt "id ~a not bound in tenv ~a." x tenv)])]
      ;; [fixFun/wt]  tenv2 ⊢ tmu : type1  
      ;; ------------------------------------------------------------
      ;;            tenv1 ⊢ {fixFun {f : type3} {x} tmu} : type3
      ;; CHECK: tenv2 = (extend-env tenv1
      ;;                            (list f x)
      ;;                            (list type3 type0))
      ;; CHECK: type3 = type0 -> type1
      [fixFun/wt
       (f type x tmu/wt1)
       (match-let ([(funType param-type result-type) (to-funType type)])
         (begin
           (check-tmu/wt-type tmu/wt1 result-type)
           (let ([tenv1 (tmu/wt-tenv tmu/wt1)])
             (begin
               (check-env-binding tenv1 f type)
               (check-env-binding tenv1 x param-type)))))]
      [app/wt (tmu/wt1 tmu/wt2)
              (begin
                (check-tmu/wt tmu/wt1)
                (match-let ([(funType param-type result-type)
                             (to-funType (tmu/wt-type tmu/wt1))])
                  (begin
                    (check-tmu/wt-type tmu/wt2 param-type)
                    (check-tmu/wt-tenvs tmu/wt1 tmu/wt2))))])))


;;Examples for tests
;; A non-terminating iteration, ever spiraling downwards
(define badIter
    (fixFun 'f (funType (numType) (numType)) 'x
            (app (id 'f) (add (num -1) (id 'x)))))

;The typing environment inside the body of badIter
(define theTenv `((f ,(funType (numType) (numType))) (x ,(numType))))

;Typing derivation for badIter
(define deriv
    (fixFun/wt 'f (funType (numType) (numType)) 'x
               (app/wt (id/wt theTenv 'f)
                       (add/wt (num/wt theTenv -1) (id/wt theTenv 'x)))))

;; Option 1 Tests (requires manual check of side conditions via check-tmu/wt)

;; Make sure the typing derivation is well-formed
(test (check-tmu/wt deriv) (void))

;; Make sure the typing derivation is for the empty environment
(test (tmu/wt-tenv deriv) '())

;; Make sure the type of the derivation is Num -> Num
(test (tmu/wt-type deriv) (funType (numType) (numType)))

;; Make sure the expression for the derivation is
;; the function we defined above
(test (tmu/wt-tmu deriv) badIter)


;; Option 2 Tests (TMU/wt should be well-formed by construction)

;; '() ⊢ 4 : number
(define nTMU (num 4))

(define nDeriv (num/wt empty-env 4))

(test (tmu/wt-tmu nDeriv) nTMU)
(test (tmu/wt-type nDeriv) (numType))

;; '() ⊢ {+ 4 4} : number
(define addTMU (add (num 4) (num 4)))

(define aDeriv (add/wt nDeriv nDeriv))

(test (tmu/wt-tmu aDeriv) addTMU)
(test (tmu/wt-type aDeriv) (numType))

;; '() ⊢ {fixFun {f : number -> number} {x} {+ 4 x}} : number -> number
;; [Notice: relies on premise '(f : number -> number, x : number) ⊢ {+ 4 x} : number]
(define funTMU (fixFun 'f (funType (numType) (numType)) 'x (add (num 4) (id 'x))))

(define tenv (extend-env empty-env (list 'f 'x) (list (funType (numType) (numType)) (numType))))

(define funDeriv (fixFun/wt 'f
                            (funType (numType) (numType))
                            'x
                            (add/wt (num/wt tenv 4) (id/wt tenv 'x))))

(test (tmu/wt-tenv funDeriv) '())
(test (tmu/wt-tmu funDeriv) funTMU)
(test (tmu/wt-type funDeriv) (funType (numType) (numType)))

;; '() ⊢ {{fixFun {f : number -> number} {x} {+ 4 x}} 5} : number 
(define appTMU (app (fixFun 'f (funType (numType) (numType)) 'x (add (num 4) (id 'x))) (num 5)))

(define appDeriv (app/wt funDeriv (num/wt empty-env 5)))

(test (tmu/wt-tenv appDeriv) '())
(test (tmu/wt-tmu appDeriv) appTMU)
(test (tmu/wt-type appDeriv) (numType))